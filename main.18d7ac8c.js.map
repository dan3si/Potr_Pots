{"version":3,"sources":["scripts/main.js"],"names":["methods","pourEnergy","element","overlaps","level","y","document","querySelectorAll","length","querySelector","x","children","energy","energyIncomingBasics","gainPerLevel","addSeed","cellX","cellY","activeGenom","targetCell","seed","createElement","__proto__","style","background","append","seeds","push","partsCount","createTree","genom","age","startTreeEnergy","woods","inFall","color","Math","floor","random","doStep","trees","tree","splice","indexOf","remove","wood","treeEnergyConsumption","newGenom","map","gen","mutGen","mutValue","newTree","energyToSprout","value","startGenom","i","timer","startButton","onclick","eval","clearInterval","innerHTML","setInterval"],"mappings":"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","file":"main.18d7ac8c.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst methods = {\n  pourEnergy(element) {\n    let overlaps = 0;\n\n    for (let level = element.y + 1;\n      level <= document.querySelectorAll('tr').length;\n      level++) {\n      if (document.querySelector(`tr:nth-child(${level})\n        > th:nth-child(${element.x})`).children.length) {\n        overlaps++;\n\n        if (overlaps === 3) {\n          break;\n        }\n      }\n    }\n\n    this.energy += (energyIncomingBasics\n      + (element.y * gainPerLevel))\n      * (3 - overlaps);\n  },\n\n  addSeed(cellX, cellY, activeGenom) {\n    let x = cellX;\n    const y = cellY;\n\n    if (x > document.querySelectorAll(`tr:first-child > th`).length) {\n      x = 1;\n    }\n\n    if (x < 1) {\n      x = document.querySelectorAll(`tr:first-child > th`).length;\n    }\n\n    const targetCell = document\n      .querySelector(`tr:nth-child(${y}) > th:nth-child(${x})`);\n\n    if (y < 1 || y > 24\n      || targetCell.children.length) {\n      return;\n    }\n\n    const seed = {\n      x,\n      y,\n      activeGenom,\n      element: document.createElement('div'),\n      energy: 0,\n      __proto__: methods,\n    };\n\n    seed.element.style.background = '#fff';\n\n    targetCell.append(seed.element);\n    this.seeds.push(seed);\n    this.partsCount++;\n  },\n};\n\nfunction createTree(genom) {\n  return {\n    age: 0,\n    energy: startTreeEnergy,\n    partsCount: 0,\n    woods: [],\n    seeds: [],\n    genom,\n    inFall: true,\n    color: `rgb(${Math.floor(Math.random() * 256)},\n      ${Math.floor(Math.random() * 256)},\n      ${Math.floor(Math.random() * 256)})\n    `,\n    __proto__: methods,\n  };\n}\n\nfunction doStep() {\n  for (const tree of [...trees]) {\n    if (tree.inFall) {\n      if (tree.seeds[0].y > 1) {\n        const targetCell = document\n          .querySelector(`tr:nth-child(${tree.seeds[0].y - 1})\n          > th:nth-child(${tree.seeds[0].x})`);\n\n        if (!targetCell.children.length) {\n          tree.seeds[0].y--;\n          targetCell.append(tree.seeds[0].element);\n        } else {\n          trees.splice(trees.indexOf(tree), 1);\n          tree.seeds[0].element.remove();\n        }\n\n        continue;\n      } else {\n        tree.inFall = false;\n      }\n    }\n\n    for (const wood of tree.woods) {\n      tree.pourEnergy(wood);\n    }\n    tree.energy -= tree.partsCount * treeEnergyConsumption;\n\n    if (tree.energy < 0 || tree.age > 30) {\n      for (const wood of tree.woods) {\n        wood.element.remove();\n      }\n      trees.splice(trees.indexOf(tree), 1);\n\n      for (const seed of tree.seeds) {\n        seed.element.remove();\n\n        const newGenom = tree.genom.map(gen => [...gen]);\n\n        if (Math.random() > 0.75) {\n          const mutGen = Math.floor(Math.random() * 16);\n          const mutValue = Math.floor(Math.random() * 4);\n\n          newGenom[mutGen][mutValue] = Math.floor(Math.random() * 31);\n        }\n\n        const newTree = createTree(newGenom);\n\n        newTree.addSeed(seed.x, seed.y, newTree.genom[0]);\n        newTree.seeds[0].pourEnergy(newTree.seeds[0]);\n        trees.push(newTree);\n      }\n      continue;\n    }\n\n    for (const seed of [...tree.seeds]) {\n      if (seed.energy < energyToSprout) {\n        continue;\n      }\n\n      tree.woods.push(tree.seeds.splice(tree.seeds.indexOf(seed), 1)[0]);\n      seed.element.style.background = tree.color;\n\n      if (seed.activeGenom[0] < 16) {\n        tree.addSeed(seed.x - 1, seed.y, tree.genom[seed.activeGenom[0]]);\n      }\n\n      if (seed.activeGenom[1] < 16) {\n        tree.addSeed(seed.x, seed.y + 1, tree.genom[seed.activeGenom[1]]);\n      }\n\n      if (seed.activeGenom[2] < 16) {\n        tree.addSeed(seed.x + 1, seed.y, tree.genom[seed.activeGenom[2]]);\n      }\n\n      if (seed.activeGenom[3] < 16) {\n        tree.addSeed(seed.x, seed.y - 1, tree.genom[seed.activeGenom[3]]);\n      }\n    }\n\n    for (const seed of tree.seeds) {\n      seed.pourEnergy(seed);\n    }\n\n    tree.age++;\n  }\n};\n\nconst trees = [];\n\nlet startTreeEnergy = +document\n  .querySelector('.startTreeEnergyInput').value;\nlet energyToSprout = +document\n  .querySelector('.seedEregyToSproutInput').value;\nlet treeEnergyConsumption = +document\n  .querySelector('.treeEregyConsumptionInput').value;\nlet energyIncomingBasics = +document\n  .querySelector('.sunIncomingBasicsInput').value;\nlet gainPerLevel = +document\n  .querySelector('.sunGainPerLevel').value;\n\nconst startGenom = [];\n\nfor (let i = 0; i < 16; i++) {\n  startGenom.push([\n    Math.floor(Math.random() * 31),\n    Math.floor(Math.random() * 31),\n    Math.floor(Math.random() * 31),\n    Math.floor(Math.random() * 31)]);\n}\n\ntrees.push(createTree(startGenom));\n\ntrees[0].addSeed(32, 1, trees[0].genom[0]);\ntrees[0].seeds[0].pourEnergy(trees[0].seeds[0]);\n\nlet timer;\n\nconst startButton = document.querySelector('.startButton');\n\nstartButton.onclick = () => {\n  if (document.querySelector('.genomInput')) {\n    if (document.querySelector('.genomInput').value) {\n      trees[0].genom = eval(document.querySelector('.genomInput').value);\n    };\n    document.querySelector('.genomArea').remove();\n  }\n\n  if (timer) {\n    clearInterval(timer);\n    timer = null;\n    startButton.innerHTML = 'START';\n  } else {\n    timer = setInterval(doStep, 10);\n    startButton.innerHTML = 'STOP';\n  }\n};\n\ndocument.querySelector('.applySettings').onclick = () => {\n  startTreeEnergy = +document\n    .querySelector('.startTreeEnergyInput').value;\n\n  energyToSprout = +document\n    .querySelector('.seedEregyToSproutInput').value;\n\n  treeEnergyConsumption = +document\n    .querySelector('.treeEregyConsumptionInput').value;\n\n  energyIncomingBasics = +document\n    .querySelector('.sunIncomingBasicsInput').value;\n\n  gainPerLevel = +document\n    .querySelector('.sunGainPerLevel').value;\n};\n"]}